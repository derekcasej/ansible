---
- name: Invoice Ninja Post-Installation Configuration
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Database configuration
    mysql_root_password: "{{ mysql_root_password | default('changeme123!') }}"
    ninja_db_name: "ninja"
    ninja_db_user: "ninja_user"
    ninja_db_password: "{{ ninja_db_password | default('ninja_secure_pass123!') }}"
    
    # Invoice Ninja configuration
    ninja_version: "v5.11.53"  # Latest stable version
    ninja_path: "/var/www/html/invoice-ninja"
    ninja_url: "{{ invoice_ninja_domain | default('localhost') }}"
    ninja_admin_email: "{{ ninja_admin_email | default('admin@example.com') }}"
    
    # SSL configuration
    enable_ssl: "{{ enable_ssl | default(false) }}"
    
    # Email configuration (optional)
    mail_driver: "{{ mail_driver | default('log') }}"
    mail_host: "{{ mail_host | default('') }}"
    mail_port: "{{ mail_port | default('587') }}"
    mail_username: "{{ mail_username | default('') }}"
    mail_password: "{{ mail_password | default('') }}"
    mail_encryption: "{{ mail_encryption | default('tls') }}"
    mail_from_address: "{{ mail_from_address | default(ninja_admin_email) }}"
    mail_from_name: "{{ mail_from_name | default('Invoice Ninja') }}"

  tasks:
    # PRE-FLIGHT CHECKS
    - name: Check if Invoice Ninja directory exists
      stat:
        path: "{{ ninja_path }}"
      register: ninja_dir_check

    - name: Check if MariaDB is running
      systemd:
        name: mariadb
      register: mariadb_status

- name: Get all PHP extensions
  shell: php -m
  register: php_extensions_check
  changed_when: false

- name: Validate PHP extensions for Invoice Ninja
  assert:
    that:
      - "'bcmath' in php_extensions_check.stdout"
      - "'ctype' in php_extensions_check.stdout"  
      - "'gd' in php_extensions_check.stdout"
      - "'mbstring' in php_extensions_check.stdout"
      - "'openssl' in php_extensions_check.stdout"
      - "'tokenizer' in php_extensions_check.stdout"
      - "'xml' in php_extensions_check.stdout"
      - "'curl' in php_extensions_check.stdout"
      - "'zip' in php_extensions_check.stdout"
      - "'mysqli' in php_extensions_check.stdout"
      - "'intl' in php_extensions_check.stdout"
    fail_msg: "Required PHP extensions are missing: {{ php_extensions_check.stdout }}"
    success_msg: "All required PHP extensions are available."

    # MARIADB SECURITY AND DATABASE SETUP
    - name: Check if MySQL root password is set
      shell: mysql -u root -p'{{ mysql_root_password }}' -e "SELECT 1;"
      register: mysql_root_check
      failed_when: false
      changed_when: false
      no_log: true

    - name: Secure MariaDB installation (automated)
      block:
        - name: Set MariaDB root password
          mysql_user:
            name: root
            password: "{{ mysql_root_password }}"
            login_unix_socket: /var/lib/mysql/mysql.sock
          when: mysql_root_check.rc != 0

        - name: Remove anonymous users
          mysql_user:
            name: ""
            host_all: yes
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"

        - name: Remove test database
          mysql_db:
            name: test
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"

        - name: Disallow root login remotely
          mysql_user:
            name: root
            host: "{{ item }}"
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"
          loop:
            - "{{ ansible_hostname }}"
            - "127.0.0.1"
            - "::1"
          ignore_errors: yes

    - name: Create Invoice Ninja database
      mysql_db:
        name: "{{ ninja_db_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
        encoding: utf8mb4
        collation: utf8mb4_unicode_ci

    - name: Create Invoice Ninja database user
      mysql_user:
        name: "{{ ninja_db_user }}"
        password: "{{ ninja_db_password }}"
        priv: "{{ ninja_db_name }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    # DOWNLOAD AND INSTALL INVOICE NINJA
    - name: Create Invoice Ninja directory
      file:
        path: "{{ ninja_path }}"
        state: directory
        owner: apache
        group: apache
        mode: '0755'

    - name: Download Invoice Ninja release
      get_url:
        url: "https://github.com/invoiceninja/invoiceninja/releases/download/{{ ninja_version }}/invoiceninja.tar"
        dest: "/tmp/invoiceninja.tar"
        mode: '0644'
        timeout: 120

    - name: Extract Invoice Ninja
      unarchive:
        src: "/tmp/invoiceninja.tar"
        dest: "{{ ninja_path }}"
        remote_src: yes
        owner: apache
        group: apache
        extra_opts: [--strip-components=1]

    - name: Set proper permissions for Invoice Ninja
      block:
        - name: Set directory permissions
          shell: find {{ ninja_path }} -type d -exec chmod 755 {} \;
          
        - name: Set file permissions
          shell: find {{ ninja_path }} -type f -exec chmod 644 {} \;
          
        - name: Set storage directory permissions
          file:
            path: "{{ ninja_path }}/storage"
            state: directory
            owner: apache
            group: apache
            mode: '0755'
            recurse: yes
            
        - name: Set bootstrap/cache directory permissions
          file:
            path: "{{ ninja_path }}/bootstrap/cache"
            state: directory
            owner: apache
            group: apache
            mode: '0755'
            recurse: yes

    - name: Copy .env.example to .env
      copy:
        src: "{{ ninja_path }}/.env.example"
        dest: "{{ ninja_path }}/.env"
        owner: apache
        group: apache
        mode: '0644'
        remote_src: yes
        force: no

    # CONFIGURE INVOICE NINJA ENVIRONMENT
    - name: Generate application key
      shell: |
        cd {{ ninja_path }}
        php artisan key:generate --force
      become_user: apache
      register: app_key_gen

    - name: Configure Invoice Ninja .env file
      lineinfile:
        path: "{{ ninja_path }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^APP_NAME=', line: 'APP_NAME="Invoice Ninja"' }
        - { regexp: '^APP_ENV=', line: 'APP_ENV=production' }
        - { regexp: '^APP_DEBUG=', line: 'APP_DEBUG=false' }
        - { regexp: '^APP_URL=', line: 'APP_URL=http{{ "s" if enable_ssl else "" }}://{{ ninja_url }}' }
        - { regexp: '^DB_CONNECTION=', line: 'DB_CONNECTION=mysql' }
        - { regexp: '^DB_HOST=', line: 'DB_HOST=127.0.0.1' }
        - { regexp: '^DB_PORT=', line: 'DB_PORT=3306' }
        - { regexp: '^DB_DATABASE=', line: 'DB_DATABASE={{ ninja_db_name }}' }
        - { regexp: '^DB_USERNAME=', line: 'DB_USERNAME={{ ninja_db_user }}' }
        - { regexp: '^DB_PASSWORD=', line: 'DB_PASSWORD="{{ ninja_db_password }}"' }
        - { regexp: '^CACHE_DRIVER=', line: 'CACHE_DRIVER=redis' }
        - { regexp: '^SESSION_DRIVER=', line: 'SESSION_DRIVER=redis' }
        - { regexp: '^QUEUE_CONNECTION=', line: 'QUEUE_CONNECTION=database' }
        - { regexp: '^REDIS_HOST=', line: 'REDIS_HOST=127.0.0.1' }
        - { regexp: '^REDIS_PASSWORD=', line: 'REDIS_PASSWORD=null' }
        - { regexp: '^REDIS_PORT=', line: 'REDIS_PORT=6379' }

    - name: Configure email settings in .env
      lineinfile:
        path: "{{ ninja_path }}/.env"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^MAIL_MAILER=', line: 'MAIL_MAILER={{ mail_driver }}' }
        - { regexp: '^MAIL_HOST=', line: 'MAIL_HOST={{ mail_host }}' }
        - { regexp: '^MAIL_PORT=', line: 'MAIL_PORT={{ mail_port }}' }
        - { regexp: '^MAIL_USERNAME=', line: 'MAIL_USERNAME="{{ mail_username }}"' }
        - { regexp: '^MAIL_PASSWORD=', line: 'MAIL_PASSWORD="{{ mail_password }}"' }
        - { regexp: '^MAIL_ENCRYPTION=', line: 'MAIL_ENCRYPTION={{ mail_encryption }}' }
        - { regexp: '^MAIL_FROM_ADDRESS=', line: 'MAIL_FROM_ADDRESS="{{ mail_from_address }}"' }
        - { regexp: '^MAIL_FROM_NAME=', line: 'MAIL_FROM_NAME="{{ mail_from_name }}"' }
      when: mail_driver != 'log'

    # CONFIGURE APACHE VIRTUAL HOST
    - name: Create Apache virtual host for Invoice Ninja
      copy:
        content: |
          <VirtualHost *:{{ apache_port | default('8080') }}>
              ServerName {{ ninja_url }}
              DocumentRoot {{ ninja_path }}/public
              
              <Directory {{ ninja_path }}/public>
                  Options -Indexes +FollowSymLinks
                  AllowOverride All
                  Require all granted
                  
                  # Security headers
                  Header always set X-Frame-Options "SAMEORIGIN"
                  Header always set X-Content-Type-Options "nosniff"
                  Header always set X-XSS-Protection "1; mode=block"
                  
                  # Disable server signature
                  ServerSignature Off
                  
                  # Enable compression
                  <IfModule mod_deflate.c>
                      AddOutputFilterByType DEFLATE text/plain
                      AddOutputFilterByType DEFLATE text/html
                      AddOutputFilterByType DEFLATE text/xml
                      AddOutputFilterByType DEFLATE text/css
                      AddOutputFilterByType DEFLATE application/xml
                      AddOutputFilterByType DEFLATE application/xhtml+xml
                      AddOutputFilterByType DEFLATE application/rss+xml
                      AddOutputFilterByType DEFLATE application/javascript
                      AddOutputFilterByType DEFLATE application/x-javascript
                      AddOutputFilterByType DEFLATE application/json
                  </IfModule>
                  
                  # Cache static assets
                  <IfModule mod_expires.c>
                      ExpiresActive On
                      ExpiresByType image/jpg "access plus 1 month"
                      ExpiresByType image/jpeg "access plus 1 month"
                      ExpiresByType image/gif "access plus 1 month"
                      ExpiresByType image/png "access plus 1 month"
                      ExpiresByType text/css "access plus 1 month"
                      ExpiresByType application/pdf "access plus 1 month"
                      ExpiresByType text/javascript "access plus 1 month"
                      ExpiresByType application/javascript "access plus 1 month"
                      ExpiresByType application/x-javascript "access plus 1 month"
                      ExpiresByType application/x-shockwave-flash "access plus 1 month"
                      ExpiresByType image/x-icon "access plus 1 year"
                      ExpiresDefault "access plus 2 days"
                  </IfModule>
              </Directory>
              
              # Logging
              ErrorLog /var/log/httpd/invoice-ninja_error.log
              CustomLog /var/log/httpd/invoice-ninja_access.log combined
              
              # PHP-FPM Configuration
              <FilesMatch \.php$>
                  SetHandler "proxy:unix:/run/php-fpm/www.sock|fcgi://localhost"
              </FilesMatch>
          </VirtualHost>
        dest: /etc/httpd/conf.d/invoice-ninja.conf
        backup: yes
      notify: restart httpd

    # INSTALL COMPOSER DEPENDENCIES (if needed)
    - name: Check if vendor directory exists
      stat:
        path: "{{ ninja_path }}/vendor"
      register: vendor_check

    - name: Install Composer dependencies
      shell: |
        cd {{ ninja_path }}
        composer install --no-dev --optimize-autoloader
      become_user: apache
      when: not vendor_check.stat.exists

    # INITIALIZE DATABASE AND OPTIMIZE
    - name: Run database migrations and optimizations
      shell: |
        cd {{ ninja_path }}
        php artisan migrate --force
        php artisan db:seed --force
        php artisan optimize
        php artisan config:cache
        php artisan route:cache
        php artisan view:cache
      become_user: apache
      register: ninja_setup
      
    # SETUP CRON JOB FOR LARAVEL SCHEDULER
    - name: Setup Laravel scheduler cron job
      cron:
        name: "Invoice Ninja Laravel Scheduler"
        minute: "*"
        job: "cd {{ ninja_path }} && php artisan schedule:run >> /dev/null 2>&1"
        user: apache

    # SETUP QUEUE WORKER (optional but recommended)
    - name: Setup queue worker with systemd
      copy:
        content: |
          [Unit]
          Description=Invoice Ninja Queue Worker
          After=network.target
          
          [Service]
          Type=simple
          User=apache
          Group=apache
          Restart=always
          ExecStart=/usr/bin/php {{ ninja_path }}/artisan queue:work --sleep=3 --tries=3 --max-time=3600
          StandardOutput=journal
          StandardError=journal
          
          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/invoice-ninja-worker.service
        mode: '0644'

    - name: Enable and start Invoice Ninja queue worker
      systemd:
        name: invoice-ninja-worker
        state: started
        enabled: yes
        daemon_reload: yes

    # SSL CERTIFICATE SETUP (if enabled)
    - name: Setup SSL certificate with Certbot
      block:
        - name: Generate SSL certificate
          shell: certbot --nginx -d {{ ninja_url }} --non-interactive --agree-tos --email {{ ninja_admin_email }}
          register: certbot_result
          
        - name: Start nginx after SSL setup
          systemd:
            name: nginx
            state: started
            
      when: enable_ssl and ninja_url != 'localhost'

    # START NGINX (if SSL not enabled)
    - name: Start nginx for HTTP access
      systemd:
        name: nginx
        state: started
      when: not enable_ssl or ninja_url == 'localhost'

    # CLEANUP
    - name: Remove downloaded tar file
      file:
        path: "/tmp/invoiceninja.tar"
        state: absent

    - name: Set final permissions
      file:
        path: "{{ ninja_path }}"
        owner: apache
        group: apache
        recurse: yes

    # VERIFICATION AND TESTING
    - name: Test database connection
      shell: |
        cd {{ ninja_path }}
        php artisan tinker --execute="DB::connection()->getPdo();"
      become_user: apache
      register: db_test
      changed_when: false

    - name: Test HTTP access
      uri:
        url: "http://{{ ninja_url if ninja_url != 'localhost' else ansible_default_ipv4.address }}"
        method: GET
        status_code: [200, 302]
        timeout: 30
      register: http_test
      ignore_errors: yes

    - name: Test HTTPS access (if SSL enabled)
      uri:
        url: "https://{{ ninja_url }}"
        method: GET
        status_code: [200, 302]
        timeout: 30
        validate_certs: no
      register: https_test
      ignore_errors: yes
      when: enable_ssl and ninja_url != 'localhost'

    # DISPLAY FINAL RESULTS
    - name: Display installation summary
      debug:
        msg: |
          ==========================================
          Invoice Ninja Installation Complete!
          ==========================================
          
          Installation Details:
          - Version: {{ ninja_version }}
          - Path: {{ ninja_path }}
          - Database: {{ ninja_db_name }}
          - Database User: {{ ninja_db_user }}
          
          Access Information:
          {% if ninja_url != 'localhost' %}
          - HTTP URL: http://{{ ninja_url }}
          {% if enable_ssl %}
          - HTTPS URL: https://{{ ninja_url }}
          - SSL Status: {{ 'Configured' if certbot_result is defined and certbot_result.rc == 0 else 'Failed - Check certbot logs' }}
          {% endif %}
          {% else %}
          - HTTP URL: http://{{ ansible_default_ipv4.address }}
          {% endif %}
          
          Service Status:
          - HTTP Test: {{ 'PASSED' if http_test.status == 200 or http_test.status == 302 else 'FAILED' }}
          {% if enable_ssl and ninja_url != 'localhost' %}
          - HTTPS Test: {{ 'PASSED' if https_test.status == 200 or https_test.status == 302 else 'FAILED' }}
          {% endif %}
          - Database Test: {{ 'PASSED' if db_test.rc == 0 else 'FAILED' }}
          - Queue Worker: {{ 'RUNNING' if ansible_facts.services['invoice-ninja-worker.service']['state'] == 'running' else 'STOPPED' }}
          
          Next Steps:
          1. Navigate to your Invoice Ninja URL to complete the setup wizard
          2. Create your admin account during setup
          3. Configure your company settings
          4. Test invoice creation and PDF generation
          
          Important Files:
          - Configuration: {{ ninja_path }}/.env
          - Logs: {{ ninja_path }}/storage/logs/
          - Apache Config: /etc/httpd/conf.d/invoice-ninja.conf
          - Nginx Config: /etc/nginx/conf.d/invoice-ninja.conf
          
          Troubleshooting:
          - Check logs: tail -f {{ ninja_path }}/storage/logs/laravel.log
          - Test artisan: cd {{ ninja_path }} && sudo -u apache php artisan list
          - Check queue: sudo systemctl status invoice-ninja-worker
          - Check services: sudo systemctl status httpd nginx mariadb redis php-fpm
          
          ==========================================

  handlers:
    - name: restart httpd
      systemd:
        name: httpd
        state: restarted
        
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
        
    - name: restart php-fpm
      systemd:
        name: php-fpm
        state: restarted
