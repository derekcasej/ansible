---
- name: Deploy Invoice Ninja with Nginx/Apache/PHP 8.2/MariaDB
  hosts: all
  become: yes
  gather_facts: yes
  
  vars:
    # Fixed versions for Invoice Ninja requirements
    php_version: "8.2"
    mariadb_version: "10.11"
    nginx_type: "stable"
    apache_port: "8080"
    domain_name: "{{ invoice_ninja_domain | default('localhost') }}"
    
    # Invoice Ninja specific packages - minimal required set
    packages:
      - httpd
      - nginx
      - mariadb-server
      - mariadb
      - redis
      - php
      - php-fpm
      - php-mysqlnd
      - php-gd
      - php-mbstring
      - php-xml
      - php-json
      - php-curl
      - php-zip
      - php-intl
      - php-soap
      - php-bcmath
      - php-opcache
      - php-cli
      - php-common
      - ImageMagick
      - php-imagick
      - git
      - wget
      - curl
      - unzip
      - zip
      - composer
      - certbot
      - python3-certbot-nginx
      - firewalld
    
    services:
      - httpd
      - nginx
      - mariadb
      - redis
      - php-fpm
      - firewalld

  tasks:
    - name: Detect OS distribution
      set_fact:
        is_rhel: "{{ ansible_distribution in ['RedHat', 'CentOS', 'Rocky', 'AlmaLinux'] }}"
        is_fedora: "{{ ansible_distribution == 'Fedora' }}"
        os_major_version: "{{ ansible_distribution_major_version }}"

    # DRY RUN CHECKS
    - name: "DRY RUN: Check if EPEL repository is available"
      dnf:
        name: epel-release
        state: present
      check_mode: yes
      register: epel_check
      when: is_rhel and dry_run is defined and dry_run

    - name: "DRY RUN: Check if Remi repository is accessible"
      uri:
        url: "https://rpms.remirepo.net/enterprise/remi-release-{{ os_major_version }}.rpm"
        method: HEAD
        status_code: 200
      register: remi_check
      when: is_rhel and dry_run is defined and dry_run

    - name: "DRY RUN: Check package availability"
      dnf:
        name: "{{ packages }}"
        state: present
      check_mode: yes
      register: package_check
      when: dry_run is defined and dry_run

    - name: "DRY RUN: Display check results"
      debug:
        msg: |
          === DRY RUN RESULTS ===
          EPEL Repository: {{ 'Available' if epel_check is not failed else 'Not Available' }}
          Remi Repository: {{ 'Accessible' if remi_check.status == 200 else 'Not Accessible' }}
          Package Check: {{ 'All packages available' if package_check is not failed else 'Some packages unavailable' }}
          
          Proceeding with actual installation...
      when: dry_run is defined and dry_run

    - name: Stop dry run execution
      meta: end_play
      when: dry_run is defined and dry_run and (epel_check is failed or remi_check.status != 200 or package_check is failed)

    # ACTUAL INSTALLATION (only runs if not dry_run or dry_run passed)
    - name: Install EPEL repository (RHEL/CentOS)
      dnf:
        name: epel-release
        state: present
      when: is_rhel and (dry_run is not defined or not dry_run)

    - name: Install Remi repository (RHEL/CentOS)
      dnf:
        name: "https://rpms.remirepo.net/enterprise/remi-release-{{ os_major_version }}.rpm"
        state: present
        disable_gpg_check: yes
      when: is_rhel and os_major_version in ['8', '9'] and (dry_run is not defined or not dry_run)

    - name: Install Remi repository (Fedora)
      dnf:
        name: "https://rpms.remirepo.net/fedora/remi-release-{{ os_major_version }}.rpm"
        state: present
        disable_gpg_check: yes
      when: is_fedora and (dry_run is not defined or not dry_run)

    - name: Enable PowerTools/CRB repository (RHEL/CentOS 8)
      command: dnf config-manager --enable powertools
      when: is_rhel and os_major_version == '8' and (dry_run is not defined or not dry_run)
      changed_when: false

    - name: Enable CRB repository (RHEL/CentOS 9)
      command: dnf config-manager --enable crb
      when: is_rhel and os_major_version == '9' and (dry_run is not defined or not dry_run)
      changed_when: false

    - name: Reset PHP module stream
      command: dnf module reset -y php
      when: is_rhel and (dry_run is not defined or not dry_run)
      changed_when: false

    - name: Enable PHP 8.2 module stream from Remi
      command: "dnf module enable -y php:remi-{{ php_version }}"
      when: is_rhel and (dry_run is not defined or not dry_run)
      changed_when: false

    - name: Reset MariaDB module stream
      command: dnf module reset -y mariadb
      when: is_rhel and (dry_run is not defined or not dry_run)
      changed_when: false

    - name: Enable MariaDB module stream
      command: "dnf module enable -y mariadb:{{ mariadb_version }}"
      when: is_rhel and (dry_run is not defined or not dry_run)
      changed_when: false
      ignore_errors: yes

    - name: Update all packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes
      when: dry_run is not defined or not dry_run

    - name: Install Invoice Ninja platform packages
      dnf:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      when: dry_run is not defined or not dry_run

    # APACHE CONFIGURATION (Port 8080)
    - name: Configure Apache to listen on port 8080
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen 80'
        line: 'Listen {{ apache_port }}'
        backup: yes
      notify: restart httpd
      when: dry_run is not defined or not dry_run

    - name: Add Listen directive for port 8080 if not exists
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        line: 'Listen {{ apache_port }}'
        insertafter: '^#Listen'
      notify: restart httpd
      when: dry_run is not defined or not dry_run

    # NGINX CONFIGURATION (Front-end proxy)
    - name: Create Nginx configuration for Invoice Ninja
      copy:
        content: |
          server {
              listen 80;
              server_name {{ domain_name }};
              
              # Redirect HTTP to HTTPS
              return 301 https://$server_name$request_uri;
          }
          
          server {
              listen 443 ssl http2;
              server_name {{ domain_name }};
              
              # SSL Configuration (certificates will be managed by certbot)
              ssl_certificate /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain_name }}/privkey.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_ciphers HIGH:!aNULL:!MD5;
              
              # Caching
              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  proxy_pass http://127.0.0.1:{{ apache_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
              
              # Main proxy to Apache
              location / {
                  proxy_pass http://127.0.0.1:{{ apache_port }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Port $server_port;
                  
                  # Buffer settings
                  proxy_buffering on;
                  proxy_buffer_size 4k;
                  proxy_buffers 8 4k;
                  proxy_busy_buffers_size 8k;
                  
                  # Timeout settings
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
              }
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
          }
        dest: /etc/nginx/conf.d/invoice-ninja.conf
        backup: yes
      notify: restart nginx
      when: dry_run is not defined or not dry_run

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify: restart nginx
      when: dry_run is not defined or not dry_run

    # PHP-FPM CONFIGURATION
    - name: Configure PHP-FPM for Invoice Ninja
      lineinfile:
        path: /etc/php-fpm.d/www.conf
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^user = ', line: 'user = apache' }
        - { regexp: '^group = ', line: 'group = apache' }
        - { regexp: '^listen = ', line: 'listen = /run/php-fpm/www.sock' }
        - { regexp: '^listen.owner = ', line: 'listen.owner = apache' }
        - { regexp: '^listen.group = ', line: 'listen.group = apache' }
        - { regexp: '^listen.mode = ', line: 'listen.mode = 0660' }
      notify: restart php-fpm
      when: dry_run is not defined or not dry_run

    # PHP CONFIGURATION for Invoice Ninja
    - name: Configure PHP settings for Invoice Ninja
      lineinfile:
        path: /etc/php.ini
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^memory_limit = ', line: 'memory_limit = 512M' }
        - { regexp: '^upload_max_filesize = ', line: 'upload_max_filesize = 100M' }
        - { regexp: '^post_max_size = ', line: 'post_max_size = 100M' }
        - { regexp: '^max_execution_time = ', line: 'max_execution_time = 300' }
        - { regexp: '^max_input_vars = ', line: 'max_input_vars = 3000' }
      notify: restart php-fpm
      when: dry_run is not defined or not dry_run

    # REDIS CONFIGURATION
    - name: Configure Redis for Invoice Ninja
      lineinfile:
        path: /etc/redis.conf
        regexp: '^# maxmemory <bytes>'
        line: 'maxmemory 256mb'
        backup: yes
      notify: restart redis
      when: dry_run is not defined or not dry_run

    - name: Configure Redis maxmemory policy
      lineinfile:
        path: /etc/redis.conf
        regexp: '^# maxmemory-policy noeviction'
        line: 'maxmemory-policy allkeys-lru'
        backup: yes
      notify: restart redis
      when: dry_run is not defined or not dry_run

    # DIRECTORY AND PERMISSIONS
    - name: Create Invoice Ninja web directory
      file:
        path: /var/www/html/invoice-ninja
        state: directory
        owner: apache
        group: apache
        mode: '0755'
      when: dry_run is not defined or not dry_run

    - name: Set SELinux context for web directory
      command: restorecon -R /var/www/html
      changed_when: false
      when: dry_run is not defined or not dry_run

    # FIREWALL CONFIGURATION
    - name: Configure firewall for HTTP and HTTPS
      firewalld:
        service: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - http
        - https
      when: dry_run is not defined or not dry_run

    - name: Block direct access to Apache port 8080
      firewalld:
        port: "{{ apache_port }}/tcp"
        permanent: yes
        state: disabled
        immediate: yes
      when: dry_run is not defined or not dry_run

    # START SERVICES
    - name: Enable and start services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop: "{{ services }}"
      when: dry_run is not defined or not dry_run

    # VERIFICATION
    - name: Verify PHP extensions for Invoice Ninja
      shell: php -m | grep -E "(bcmath|ctype|soap|gd|mbstring|openssl|tokenizer|xml|curl|zip|gmp|iconv|mysqli|intl|imagick)"
      register: php_extensions
      changed_when: false
      when: dry_run is not defined or not dry_run

    - name: Get installed versions
      shell: |
        echo "PHP: $(php --version | head -n1)"
        echo "MariaDB: $(mariadb --version)"
        echo "Apache: $(httpd -v | head -n1)"
        echo "Nginx: $(nginx -v 2>&1)"
        echo "Redis: $(redis-server --version)"
      register: version_info
      changed_when: false
      when: dry_run is not defined or not dry_run

    - name: Display deployment summary
      debug:
        msg: |
          === Invoice Ninja Platform Deployment Completed ===
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          
          Installed versions:
          {{ version_info.stdout }}
          
          PHP Extensions Available:
          {{ php_extensions.stdout }}
          
          Configuration:
          - Nginx: Frontend proxy (ports 80/443)
          - Apache: Backend server (port {{ apache_port }})
          - PHP: 8.2 with Invoice Ninja required extensions
          - MariaDB: {{ mariadb_version }}
          - Redis: Configured for caching
          
          Next steps:
          1. Run 'sudo mysql_secure_installation' to secure MariaDB
          2. Create database and user for Invoice Ninja
          3. Install SSL certificates: certbot --nginx -d {{ domain_name }}
          4. Download and configure Invoice Ninja in /var/www/html/invoice-ninja
          5. Test access via https://{{ domain_name }}
      when: dry_run is not defined or not dry_run

  handlers:
    - name: restart httpd
      systemd:
        name: httpd
        state: restarted

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart php-fpm
      systemd:
        name: php-fpm
        state: restarted

    - name: restart redis
      systemd:
        name: redis
        state: restarted
